name: Deploy to Vercel

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check

      - name: Test build
        run: npm run build

  deploy-dev:
    name: Deploy Development
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/dev'
    environment:
      name: development
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Vercel (Development)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_DEV }}
          vercel-args: '--prod --config vercel.dev.json'
          working-directory: ./

  deploy-prod:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://minimarket.aramac.dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Deploy to Vercel (Production)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PROD }}
          vercel-args: '--prod --config vercel.prod.json'
          working-directory: ./

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod]
    if: always()
    steps:
      - name: Deployment Success (Dev)
        if: needs.deploy-dev.result == 'success'
        run: |
          echo "üöÄ Development deployment successful!"
          echo "Environment: Development (Random Vercel URL)"

      - name: Deployment Success (Prod) 
        if: needs.deploy-prod.result == 'success'
        run: |
          echo "üöÄ Production deployment successful!"
          echo "Environment: Production (minimarket.aramac.dev)"

      - name: Deployment Failed
        if: needs.deploy-dev.result == 'failure' || needs.deploy-prod.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          exit 1